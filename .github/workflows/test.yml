name: Build

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine wheel jupyter-packaging "jupyterlab<4"

      - name: Build
        run: |
          python setup.py generate_source
          python setup.py sdist bdist_wheel

      - name: Build
        run: |
          cd js
          npm pack

      - name: Upload builds
        uses: actions/upload-artifact@v3
        with:
          name: ipyvuetify-dist-${{ github.run_number }}
          path: |
            ./dist
            ./js/*.tgz

  test:
    needs: [build]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          name: ipyvuetify-dist-${{ github.run_number }}

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: pip install dist/*.whl

      - name: Import
        # do the import in a subdirectory, as after installation, files in de current directory are also imported
        run: |
          (mkdir test-install; cd test-install; python -c "from ipyvuetify import Btn")

  ui-test:
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          name: ipyvuetify-dist-${{ github.run_number }}

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install vuetify and test deps
        run: |
          wheel=(dist/*.whl)
          pip install ${wheel}[test] "jupyter_server<2"

      - name: Install playwright browsers
        run: playwright install chromium

      - name: Run ui-tests
        run: pytest tests/ui/ --video=retain-on-failure --solara-update-snapshots-ci -s

      - name: Upload Test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ipyvuetify-test-results
          path: test-results

  release:
    if: startsWith(github.event.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ipyvuetify-dist-${{ github.run_number }}

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine wheel jupyter-packaging jupyterlab

      - name: Publish the Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload --skip-existing dist/*

      - name: Publish the NPM package
        run: |
          cd js
          echo $PRE_RELEASE
          if [[ $PRE_RELEASE == "true" ]]; then export TAG="next"; else export TAG="latest"; fi
          npm publish --tag ${TAG} --access public *.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
