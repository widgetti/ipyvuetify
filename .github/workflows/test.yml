name: Build

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: pre-commit/action@v3.0.1

  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "reacton[generate]" ipyvue "jupyterlab<4"  build

      - name: build wheel
        run: python -m build

      - name: Build component file
        run: |
          cp ipyvuetify/components.py ipyvuetify/components-previous.py
          python -m ipyvuetify.components
          diff ipyvuetify/components.py ipyvuetify/components-previous.py
      - name: Package js
        run: (cd js && npm pack)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipyvuetify-dist-${{ github.run_number }}
          path: |
            ./dist
            ./js/*.tgz

      - name: Upload components
        uses: actions/upload-artifact@v4
        with:
          name: ipyvuetify-components-${{ github.run_number }}
          path: |
            ./ipyvuetify/components.py

  test:
    needs: [lint, build]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v4
        with:
          name: ipyvuetify-dist-${{ github.run_number }}
      - name: Install ipyvuetify
        run: |
          pip install jupyter_core jupyter-packaging "jupyterlab<4"
          python -m pip install https://github.com/widgetti/ipyvue/archive/refs/heads/vue3.zip "$(find dist -name *.whl)"
      - name: test import
        run: (mkdir test-install; cd test-install; python -c "from ipyvuetify import Btn")

  ui-test:
    needs: [lint, build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/download-artifact@v4
        with:
          name: ipyvuetify-dist-${{ github.run_number }}
      - name: Install ipyvuetify
        run: |
          pip install jupyter_core jupyter-packaging "jupyterlab<4"
          python -m pip install https://github.com/widgetti/ipyvue/archive/refs/heads/vue3.zip "$(find dist -name *.whl)[test]"
      - name: Install chromium
        run: playwright install chromium
      - name: Run ui-tests
        run: pytest tests/ui/ --video=retain-on-failure -s
      - name: Upload Test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ipyvuetify-test-results
          path: test-results

  release-dry-run:
    needs: [test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ipyvuetify-dist-${{ github.run_number }}

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
      #      No --dry-run available for twine
      #      - name: Publish the Python package
      - name: Publish the NPM package
        run: |
          cd js
          echo $PRE_RELEASE
          if [[ $PRE_RELEASE == "true" ]]; then export TAG="next"; else export TAG="latest"; fi
          npm publish --dry-run --tag ${TAG} --access public *.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}

  release:
    if: startsWith(github.event.ref, 'refs/tags/v')
    needs: [release-dry-run]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ipyvuetify-dist-${{ github.run_number }}

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine wheel jupyter-packaging jupyterlab

      - name: Publish the Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload --skip-existing dist/*

      - name: Publish the NPM package
        run: |
          cd js
          echo $PRE_RELEASE
          if [[ $PRE_RELEASE == "true" ]]; then export TAG="next"; else export TAG="latest"; fi
          npm publish --tag ${TAG} --access public *.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
